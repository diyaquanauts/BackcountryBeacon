#include "Arduino.h"
#include "FS.h"
#include "SD_MMC.h"
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include "TFT_eSPI.h" // https://github.com/Bodmer/TFT_eSPI
#include "girl.h"
#include "logo.h"
#include "logo2.h"
#include "pin_config.h"
#include "esp_task_wdt.h"
#include "index.h"

// WiFi credentials
const char* ssid = "AftermathAtlas";
const char* password = "12345678";

TFT_eSPI tft = TFT_eSPI();
AsyncWebServer server(80);

// Request counter and limit
volatile int activeRequests = 0;
const int MAX_CONCURRENT_REQUESTS = 1;

void logHeap(const char* label) {
  Serial.printf("Free heap %s: %d bytes\n", label, ESP.getFreeHeap());
}

void handleTileRequest(AsyncWebServerRequest *request) {
  if (activeRequests < MAX_CONCURRENT_REQUESTS) {
    activeRequests++;
    logHeap("before handling tile request");
    String path = request->url();
    if (SD_MMC.exists(path)) {
      logHeap("before serving tile");
      request->send(SD_MMC, path, "image/png");
      logHeap("after serving tile");
      Serial.println("Tile served: " + path);
    } else {
      request->send(404, "text/plain", "Tile not found");
      Serial.println("Tile not found: " + path);
    }
    logHeap("after serving tile request");
    activeRequests--;
  } else {
    request->send(503, "text/plain", "Server busy");
    Serial.println("Sent 503.");
  }
}

void notFound(AsyncWebServerRequest *request) {
  if (activeRequests < MAX_CONCURRENT_REQUESTS) {
    activeRequests++;
    logHeap("before handling not found");
    String path = request->url();
    if (path.startsWith("/tiles")) {
      logHeap("before checking existence");
      if (SD_MMC.exists(path)) {
        logHeap("before serving tile");
        request->send(SD_MMC, path, "image/png");
        logHeap("after serving tile");
        Serial.println("Tile served: " + path);
      } else {
        request->send(404, "text/plain", "Tile not found");
        Serial.println("Tile not found: " + path);
      }
    } else {
      request->send(404, "text/plain", "Not found");
      Serial.println("Request not found: " + path + " - responded with 404");
    }
    logHeap("after handling request");
    activeRequests--;
  } else {
    request->send(503, "text/plain", "Server busy");
        Serial.println("Sent 503.");

  }
}

void setUpWebserver(AsyncWebServer &server, const String &localIPURL) {
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    if (activeRequests < MAX_CONCURRENT_REQUESTS) {
      activeRequests++;
      logHeap("before serving index.html");
      Serial.println("Serving index.html");
    request->send_P(200, "text/html", index_html);
      logHeap("after serving index.html");
      activeRequests--;
    } else {
      request->send(503, "text/plain", "Server busy");
      Serial.println("Sent 503.");
    }
  });

  server.on("^\\/tiles\\/.*$", HTTP_GET, handleTileRequest);

  server.serveStatic("/leaflet.js", SD_MMC, "/leaflet.js").setCacheControl("max-age=31536000");
  server.on("/leaflet.js", HTTP_GET, [](AsyncWebServerRequest *request){
    if (activeRequests < MAX_CONCURRENT_REQUESTS) {
      activeRequests++;
      logHeap("before serving leaflet.js");
      Serial.printf("Free heap after serving leaflet.js: %d bytes\n", ESP.getFreeHeap());
      activeRequests--;
    } else {
      request->send(503, "text/plain", "Server busy");
    }
  });

  server.serveStatic("/leaflet.css", SD_MMC, "/leaflet.css").setCacheControl("max-age=31536000");
  server.on("/leaflet.css", HTTP_GET, [](AsyncWebServerRequest *request){
    if (activeRequests < MAX_CONCURRENT_REQUESTS) {
      activeRequests++;
      logHeap("before serving leaflet.css");
      Serial.printf("Free heap after serving leaflet.css: %d bytes\n", ESP.getFreeHeap());
      activeRequests--;
    } else {
      request->send(503, "text/plain", "Server busy");
      Serial.println("Sent 503.");
    }
  });

  server.onNotFound(notFound);

  server.on("/connecttest.txt", [](AsyncWebServerRequest *request) { request->redirect("http://logout.net"); });
  server.on("/wpad.dat", [](AsyncWebServerRequest *request) { request->send(404); });
  server.on("/generate_204", [localIPURL](AsyncWebServerRequest *request) { request->redirect(localIPURL); });
  server.on("/redirect", [localIPURL](AsyncWebServerRequest *request) { request->redirect(localIPURL); });
  server.on("/hotspot-detect.html", [localIPURL](AsyncWebServerRequest *request) { request->redirect(localIPURL); });
  server.on("/canonical.html", [localIPURL](AsyncWebServerRequest *request) { request->redirect(localIPURL); });
  server.on("/success.txt", [](AsyncWebServerRequest *request) { request->send(200); });

  server.on("/favicon.ico", [](AsyncWebServerRequest *request) { request->send(404); });
}

void setup() {
  Serial.begin(115200);
  Serial.println("Hello T-Dongle-S3");

  // Configure the Task Watchdog
  esp_task_wdt_init(60, true);
  esp_task_wdt_add(NULL);

  pinMode(TFT_LEDA_PIN, OUTPUT);
  tft.init();
  tft.setRotation(1);
  tft.fillScreen(TFT_DARKGREY);
  digitalWrite(TFT_LEDA_PIN, 0);
  tft.setTextFont(1);
  tft.setTextColor(TFT_GREEN, TFT_BLACK);

  SD_MMC.setPins(SD_MMC_CLK_PIN, SD_MMC_CMD_PIN, SD_MMC_D0_PIN, SD_MMC_D1_PIN, SD_MMC_D2_PIN, SD_MMC_D3_PIN);
  if (!SD_MMC.begin("/sdcard", false, false, 40000000, 16)) {
    Serial.println("Card Mount Failed");
    return;
  }
  uint8_t cardType = SD_MMC.cardType();
  if (cardType == CARD_NONE) {
    Serial.println("No SD card attached");
    return;
  }

  Serial.println("SD card initialized.");
  Serial.print("SD Card Type: ");
  if (cardType == CARD_MMC) {
    Serial.println("MMC");
  } else if (cardType == CARD_SD) {
    Serial.println("SDSC");
  } else if (cardType == CARD_SDHC) {
    Serial.println("SDHC");
  } else {
    Serial.println("UNKNOWN");
  }

  uint64_t cardSize = SD_MMC.cardSize() / (1024 * 1024);
  Serial.printf("SD Card Size: %lluMB\n", cardSize);

  // Set up the Access Point
  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  // Set up web server with captive portal
  String localIPURL = "http://" + IP.toString() + "/index.html";
  setUpWebserver(server, localIPURL);

  server.begin();
}

void loop() {
  esp_task_wdt_reset();

  static uint8_t i;
  switch (i++) {
  case 0:
    tft.pushImage(0, 0, 160, 80, (uint16_t *)gImage_logo);
    break;
  case 1:
    tft.pushImage(0, 0, 160, 80, (uint16_t *)gImage_logo2);
    break;
  case 2:
    tft.pushImage(0, 0, 160, 80, (uint16_t *)gImage_girl);
    i = 0;
    break;
  default:
    break;
  }
  delay(2000);

  // Print free heap memory periodically
  static unsigned long lastHeapCheck = 0;
  if (millis() - lastHeapCheck > 5000) {
    lastHeapCheck = millis();
    Serial.printf("Free heap: %d bytes\n", ESP.getFreeHeap());
  }

  esp_task_wdt_reset();
}
